// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+q ctrl+w",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+/ ctrl+left",
    "command": "workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+k left",
    "command": "-workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+/ ctrl+right",
    "command": "workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+k right",
    "command": "-workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+q ctrl+w",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+shift+a",
    "command": "views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k left",
    "command": "-views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "tab ctrl+d",
    "command": "views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k right",
    "command": "-views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "tab ctrl+w",
    "command": "views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k up",
    "command": "-views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "tab ctrl+s",
    "command": "views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k down",
    "command": "-views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "ctrl+shift+d",
    "command": "-workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "ctrl+shift+a",
    "command": "workbench.action.quickOpenView"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quickOpenView"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },

  {
    "key": "numpad_multiply numpad_divide",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+shift+h",
    "command": "-workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+u",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },

  {
    // Move cursor left by one character
    "key": "ctrl+h",
    "command": "cursorMove",
    "args": {
      "to": "left",
      "by": "character",
      "value": 1
    },
    "when": "textInputFocus"
  },
  {
    // Move cursor right by one character
    "key": "ctrl+l",
    "command": "cursorMove",
    "args": {
      "to": "right",
      "by": "character",
      "value": 1
    },
    "when": "textInputFocus"
  },
  {
    // Move cursor right by one word
    "key": "ctrl+n",
    "command": "cursorWordStartLeft",
    "when": "textInputFocus"
  },
/*   {
    // Move cursor left by one word
    "key": "ctrl+.",
    "command": "cursorWordEndRight",
    "when": "textInputFocus"
  }, */
  {
    // Move cursor down by three lines
    "key": "ctrl+m",
    "command": "cursorMove",
    "args": {
      "to": "down",
      "by": "line",
      "value": 3
    },
    "when": "textInputFocus"
  },
  {
    // Move cursor up by three lines
    "key": "ctrl+,",
    "command": "cursorMove",
    "args": {
      "to": "up",
      "by": "line",
      "value": 3
    },
    "when": "textInputFocus"
  },
  {
    "key": "shift+ctrl+n",
    "command": "cursorWordStartRightSelect",
    "when": "textInputFocus",
    "args": {
        "wordNavigationType": "word"
    },
    "mac": {
        "primary": true,
        "secondary": true,
        "third": true
    }
},
{
    "key": "shift+ctrl+m",
    "command": "cursorWordStartLeftSelect",
    "when": "textInputFocus",
    "args": {
        "wordNavigationType": "word"
    },
    "mac": {
        "primary": true,
        "secondary": true,
        "third": true
    }
},
{
    "key": "shift+ctrl+,",
    "command": "cursorMove",
    "args": {
        "to": "down",
        "by": "line",
        "value": 3
    },
    "when": "textInputFocus",
    "mac": {
        "primary": true,
        "secondary": true,
        "third": true
    }
},


/* {
    "key": "ctrl+shift+.",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus"
}, */
{
    "key": "ctrl+shift+n",
    "command": "cursorWordStartLeftSelect",
    "when": "textInputFocus"
},
{
    "key": "ctrl+shift+k",
    "command": "cursorMove",
    "args": {
        "to": "up",
        "by": "line",
        "value": 1
    },
    "when": "textInputFocus",
    "select": true
},
{
    "key": "ctrl+shift+j",
    "command": "cursorMove",
    "args": {
        "to": "down",
        "by": "line",
        "value": 1
    },
    "when": "textInputFocus",
    "select": true
},
{
    "key": "ctrl+shift+,",
    "command": "cursorMove",
    "args": {
        "to": "up",
        "by": "line",
        "value": 4
    },
    "when": "textInputFocus",
    "select": true
},
{
    "key": "ctrl+shift+m",
    "command": "cursorMove",
    "args": {
        "to": "down",
        "by": "line",
        "value": 4
    },
    "when": "textInputFocus",
    "select": true
},
{
    "key": "ctrl+shift+n",
    "command": "cursorWordStartLeftSelect",
    "when": "textInputFocus"
},
{
    "key": "ctrl+shift+.",
    "command": "cursorWordStartRightSelect",
    "when": "textInputFocus"
},
{
    "key": "ctrl+d",
    "command": "editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
},
{
    "key": "ctrl+k ctrl+0",
    "command": "-editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
},

















/* select */
{ 
    "key": "ctrl+.",      
    "command": "cursorWordEndRight",
    "when": "textInputFocus && !accessibilityModeEnabled" },
{ 
    "key": "ctrl+shift+.",      
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus && !accessibilityModeEnabled" },
{ 
    "key": "ctrl+shift+h",            
    "command": "cursorLeftSelect",
    "when": "textInputFocus" },

{ 
    "key": "ctrl+n",      
    "command": "cursorWordLeft",
    "when": "textInputFocus && !accessibilityModeEnabled" },
{ 
    "key": "ctrl+shift+n",      
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus && !accessibilityModeEnabled" },
{ 
    "key": "ctrl+shift+l",            
    "command": "cursorRightSelect",
    "when": "textInputFocus" },
    
/* select up and down */
{ "key": "ctrl+shift+k",              
    "command": "cursorUpSelect",
    "when": "textInputFocus" },

{ "key": "ctrl+shift+j",              
    "command": "cursorDownSelect",
    "when": "textInputFocus" },

{
  "key": "ctrl+shift+,",
  "command": "cursorUpSelect",
  "args": {
    "by": "line",
    "value": 3
  },
  "when": "textInputFocus"
},




/* jumping history */
{ "key": "alt+h",              
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack" },
{ "key": "alt+l",              
    "command": "workbench.action.navigateForward",
    "when": "canNavigateBack" },


{ "key": "ctrl+u",          "command": "editor.action.selectHighlights",
    "when": "editorFocus" },


{ "key": "ctrl+h",                  "command": "editor.action.scrollLeftHover",
                                     "when": "editorHoverFocused" },
{ "key": "ctrl+l",                 "command": "editor.action.scrollRightHover",
                                     "when": "editorHoverFocused" },


 


                    
{ "key": "ctrl+l",                 "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "ctrl+h",                  "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },





{ "key": "ctrl+i",                "command": "problems.action.showQuickFixes",
                                     "when": "problemFocus" },
{ "key": "ctrl+i",                "command": "workbench.action.terminal.showQuickFixes",
                                     "when": "terminalFocus" },
{ "key": "ctrl+i",                "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+i",                "command": "editor.action.quickFix",
                                     "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },

{ "key": "ctrl+;",             "command": "deleteLeft",
                                     "when": "textInputFocus" },

{ "key": "ctrl+o",                   "command": "goToNextReference",
"when": "inReferenceSearchEditor || referenceSearchVisible" },

{ "key": "ctrl+o",                   "command": "editor.action.revealDefinition",
"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },

{ "key": "ctrl+o",                   "command": "editor.gotoNextSymbolFromResult",
"when": "hasSymbols" },



{ "key": "ctrl+j",                  "command": "cursorDown",
                                     "when": "textInputFocus" },

{ "key": "ctrl+j",                  "command": "interactiveEditor.arrowOutDown",
                                     "when": "interactiveEditorFocused && interactiveEditorHasProvider && interactiveEditorInnerCursorLast" },

{ "key": "ctrl+j",                  "command": "interactiveEditor.focus",
                                     "when": "editorTextFocus && interactiveEditorVisible && !interactiveEditorFocused && interactiveEditorOuterCursorPosition == 'above'" },

{ "key": "ctrl+j",                  "command": "editor.action.scrollDownHover",
                                     "when": "editorHoverFocused" },

{ "key": "ctrl+j",                  "command": "editor.action.selectNextStickyScrollLine",
                                     "when": "stickyScrollFocused" },

{ "key": "ctrl+j",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },

{ "key": "ctrl+j",                  "command": "settings.action.focusSettingsFile",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },

{ "key": "ctrl+j",                  "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },

{ "key": "ctrl+j",                  "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },

{ "key": "ctrl+j",                  "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "interactive.history.next",
                                     "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },

{ "key": "ctrl+j",                  "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus" },

{ "key": "ctrl+j",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },

{ "key": "ctrl+j",                  "command": "notifications.focusNextToast",
                                     "when": "notificationFocus && notificationToastsVisible" },

{ "key": "ctrl+j",                  "command": "scm.viewNextCommit",
                                     "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "settings.action.focusSettingsFromSearch",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },

{ "key": "ctrl+j",                  "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },

{ "key": "ctrl+j",                  "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },

{ "key": "ctrl+j",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },


                                     { "key": "ctrl+k",                    "command": "cursorUp",
                                     "when": "textInputFocus" },

{ "key": "ctrl+k",                    "command": "interactiveEditor.arrowOutUp",
                                     "when": "interactiveEditorFocused && interactiveEditorHasProvider && interactiveEditorInnerCursorFirst" },

{ "key": "ctrl+k",                    "command": "interactiveEditor.focus",
                                     "when": "editorTextFocus && interactiveEditorVisible && !interactiveEditorFocused && interactiveEditorOuterCursorPosition == 'below'" },

{ "key": "ctrl+k",                    "command": "editor.action.scrollUpHover",
                                     "when": "editorHoverFocused" },

{ "key": "ctrl+k",                    "command": "editor.action.selectPreviousStickyScrollLine",
                                     "when": "stickyScrollFocused" },

{ "key": "ctrl+k",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },

{ "key": "ctrl+k",                    "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },

{ "key": "ctrl+k",                    "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },

{ "key": "ctrl+k",                    "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },

{ "key": "ctrl+k",                    "command": "interactive.history.previous",
                                     "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },

{ "key": "ctrl+k",                    "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus" },

{ "key": "ctrl+k",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },

{ "key": "ctrl+k",                    "command": "notifications.focusPreviousToast",
                                     "when": "notificationFocus && notificationToastsVisible" },

{ "key": "ctrl+k",                    "command": "scm.viewPreviousCommit",
                                     "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },

{ "key": "ctrl+k",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },

{ "key": "ctrl+k",                    "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },

{ "key": "ctrl+k",                    "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },

{ "key": "ctrl+k",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },

{ "key": "ctrl+k",                    "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },










{ "key": "ctrl+r",                 "command": "interactiveEditor.accept",
                                     "when": "interactiveEditorFocused && interactiveEditorHasProvider && interactiveEditorVisible && !interactiveEditorEmpty" },

{ "key": "ctrl+r",                 "command": "breakpointWidget.action.acceptInput",
                                     "when": "breakpointWidgetVisible && inBreakpointWidget" },

{ "key": "ctrl+r",                 "command": "editor.action.extensioneditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },

{ "key": "ctrl+r",                 "command": "editor.action.goToFocusedStickyScrollLine",
                                     "when": "stickyScrollFocused" },

{ "key": "ctrl+r",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },

{ "key": "ctrl+r",                 "command": "editor.action.webvieweditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },

{ "key": "ctrl+r",                 "command": "interactiveSession.action.acceptInput",
                                     "when": "inInteractiveInput && textInputFocus" },

{ "key": "ctrl+r",                 "command": "repl.action.acceptInput",
                                     "when": "inDebugRepl && textInputFocus" },

{ "key": "ctrl+r",                 "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },

{ "key": "ctrl+r",                 "command": "acceptSelectedSuggestion",
                                     "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },

{ "key": "ctrl+r",                 "command": "acceptRenameInput",
                                     "when": "editorFocus && renameInputVisible && !isComposing" },

{ "key": "ctrl+r",                 "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },

{ "key": "ctrl+r",                 "command": "keybindings.editor.acceptWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },

{ "key": "ctrl+r",                 "command": "keybindings.editor.defineKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !whenFocus" },

{ "key": "ctrl+r",                 "command": "list.select",
                                     "when": "listFocus && !inputFocus" },

{ "key": "ctrl+r",                 "command": "notebook.cell.edit",
                                     "when": "notebookCellListFocused && notebookEditable && !inputFocus" },

{ "key": "ctrl+r",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },

{ "key": "ctrl+r",                 "command": "problems.action.open",
                                     "when": "problemFocus" },

{ "key": "ctrl+r",                 "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },

{ "key": "ctrl+r",                 "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },

{ "key": "ctrl+r",                 "command": "settings.action.focusSettingControl",
                                     "when": "settingRowFocus" },

{ "key": "ctrl+r",                 "command": "settings.action.focusSettingsList",
                                     "when": "inSettingsEditor && settingsTocRowFocus" },

{ "key": "ctrl+r",                 "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },

{ "key": "ctrl+r",                 "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },

{ "key": "ctrl+r",                 "command": "explorer.openAndPassFocus",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },

{ "key": "ctrl+r",                 "command": "markdown.extension.onEnterKey",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/" },

{ "key": "ctrl+r",                 "command": "latex-workshop.onEnterKey",
                                     "when": "acceptSuggestionOnEnter && config.latex-workshop.bind.enter.key && editorTextFocus && vim.active && !editorReadonly && !suggestWidgetVisible && vim.mode == 'Insert' && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/" },

{ "key": "ctrl+r",                 "command": "latex-workshop.onEnterKey",
                                     "when": "config.latex-workshop.bind.enter.key && editorTextFocus && vim.active && !acceptSuggestionOnEnter && !editorReadonly && vim.mode == 'Insert' && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/" },

{ "key": "ctrl+r",                 "command": "latex-workshop.onEnterKey",
                                     "when": "acceptSuggestionOnEnter && config.latex-workshop.bind.enter.key && editorTextFocus && !editorReadonly && !suggestWidgetVisible && !vim.active && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/" },

{ "key": "ctrl+r",                 "command": "latex-workshop.onEnterKey",
                                     "when": "config.latex-workshop.bind.enter.key && editorTextFocus && !acceptSuggestionOnEnter && !editorReadonly && !vim.active && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/" },

{ "key": "ctrl+r",                 "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" }


]
 
